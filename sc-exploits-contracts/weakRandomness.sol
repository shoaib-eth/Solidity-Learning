// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/**
 * @title WeakRandomness
 * @dev A contract that generates a random number based on certain inputs.
 * @notice This contract provides a function to generate a random number using the caller's address, the previous block's randomness, and the current block's timestamp.
 * @dev The randomness generated by this contract is not secure and can be manipulated by miners or other actors. It should not be used for critical applications such as lotteries or other scenarios requiring strong randomness.
 */
contract WeakRandomness {
    /*
     * @notice A fair random number generator
     */
    function getRandomNumber() external view returns (uint256) {
        uint256 randomNumber = uint256(keccak256(abi.encodePacked(msg.sender, block.prevrandao, block.timestamp)));
        return randomNumber;
    }
}

/**
 * @notice To protect this contract from randomness attacks, consider the following suggestions:
 * - Use a secure source of randomness, such as Chainlink VRF (Verifiable Random Function).
 * - Avoid using block attributes (e.g., block.timestamp, block.difficulty) as they can be manipulated by miners.
 * - Implement a commit-reveal scheme where users commit to a value and reveal it later to ensure fairness.
 * - Regularly audit and test the contract to identify and fix potential vulnerabilities.
 * - Ensure that the randomness generation process is transparent and verifiable by all participants.
 */
